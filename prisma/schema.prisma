// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orgs          Member[]
}

model WaitlistUser {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Org {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     Member[]
  roles     Role[]
}

enum MEMBERHIP_STATUS {
  ACCEPTED
  PENDING
  DECLINED
}

model Member {
  id           String           @id @default(cuid())
  title        String?
  active       Boolean          @default(true)
  status       MEMBERHIP_STATUS @default(PENDING)
  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  orgId String?
  org   Org?    @relation(fields: [orgId], references: [id])

  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  @@unique([userId, orgId, invitedEmail])
  @@index([orgId])
  @@index([roleId])
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String
  permissions Json

  orgId String
  org   Org    @relation(fields: [orgId], references: [id])

  members Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, orgId])
  @@index([orgId])
}
