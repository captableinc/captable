generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator json {
  provider = "prisma-json-types-generator"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  companies     Membership[]
}

model WaitlistUser {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id                   String   @id @default(cuid())
  name                 String
  publicId             String
  incorporationType    String
  incorporationDate    DateTime
  incorporationCountry String
  incorporationState   String

  streetAddress String
  city          String
  state         String
  zipcode       String

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  users        Membership[]
  audits       Audit[]
  shareClasses ShareClass[]
  equityPlans  EquityPlan[]
  documents    Document[]

  @@unique([publicId])
}

enum MEMBERHIP_STATUS {
  pending
  accepted
  declined
}

enum MEMBERSHIP_ACCESS {
  admin
  stakeholder
}

model Membership {
  id          String            @id @default(cuid())
  title       String?
  active      Boolean           @default(true)
  status      MEMBERHIP_STATUS  @default(pending)
  access      MEMBERSHIP_ACCESS @default(stakeholder)
  isOnboarded Boolean           @default(false)

  workEmail    String?
  lastAccessed DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  documentReceived DocumentRecepients[]
  documentUploaded Document[]

  @@unique([companyId, userId])
  @@index([companyId])
  @@index([status])
  @@index([userId])
}

model Audit {
  id String @id @default(cuid())

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  summary String?

  /// [AuditAction]
  action     String
  occurredAt DateTime @default(now())

  /// [AuditActor]
  actor Json

  /// [AuditTarget]
  target Json[]

  /// [AuditContext]
  context Json

  @@index([companyId])
}

enum ShareTypeEnum {
  common
  preferred
}

enum SharePrefixEnum {
  CS // Common Shares
  PS // Preferred Shares
}

enum ConversionRightsEnum {
  convertsToFutureRound
  convertsToShareClassId
}

// Based on OCF format
// https://open-cap-table-coalition.github.io/Open-Cap-Format-OCF/schema_markdown/schema/objects/StockClass/
model ShareClass {
  id                      String          @id @default(cuid())
  idx                     Int // auto-generated, auto-incremented based on company
  name                    String
  classType               ShareTypeEnum   @default(common)
  prefix                  SharePrefixEnum @default(CS)
  initialSharesAuthorized BigInt
  boardApprovalDate       DateTime
  stockholderApprovalDate DateTime
  votesPerShare           Int
  parValue                Float
  pricePerShare           Float
  seniority               Int

  // Conversion Rights
  conversionRights       ConversionRightsEnum @default(convertsToFutureRound)
  convertsToShareClassId String?

  liquidationPreferenceMultiple Float
  participationCapMultiple      Float

  companyId   String
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  equityPlans EquityPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, idx])
  @@index([companyId])
}

enum CancellationBehaviorEnum {
  RETIRE
  RETURN_TO_POOL
  HOLD_AS_CAPITAL_STOCK
  DEFINED_PER_PLAN_SECURITY
}

model EquityPlan {
  id                         String                   @id @default(cuid())
  name                       String
  boardApprovalDate          DateTime
  planEffectiveDate          DateTime?
  initialSharesReserved      BigInt
  defaultCancellatonBehavior CancellationBehaviorEnum
  comments                   String?

  companyId    String
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  shareClassId String
  shareClass   ShareClass @relation(fields: [shareClassId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shareClassId])
  @@index([companyId])
}

enum UploadProviders {
  S3
  R2
}

enum DocumentType {
  SAFE
  EQUITY
  GENERIC
}

enum DocumentStatus {
  DRAFT
  COMPLETED
}

model Document {
  id             String          @id @default(cuid())
  publicId       String
  status         DocumentStatus  @default(DRAFT)
  name           String
  key            String
  type           DocumentType
  size           Int
  mimeType       String
  uploadProvider UploadProviders
  companyId      String
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  uploaderId String
  uploader   Membership @relation(fields: [uploaderId], references: [id])

  fields DocumentFields[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([publicId])
  @@index([companyId])
  @@index([uploaderId])
}

enum DocumentFieldTypes {
  TEXT
  TEXT_AREA
  RADIO
  CHECK_BOX
  SIGNATURE
  DATE
  DATE_TIME
  EMAIL
}

model DocumentFields {
  id          String             @id @default(cuid())
  name        String
  type        DocumentFieldTypes @default(TEXT)
  placeholder String             @default("")
  required    Boolean            @default(false)
  documentId  String
  document    Document           @relation(fields: [documentId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([documentId])
}

enum DocumentSigningStatus {
  NOT_SIGNED
  SIGNED
}

model DocumentRecepients {
  id           String                @id @default(cuid())
  signedStatus DocumentSigningStatus
  membershipId String
  membership   Membership            @relation(fields: [membershipId], references: [id])
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@index([membershipId])
}
