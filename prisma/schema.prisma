generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  companys      Membership[]
}

model WaitlistUser {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id   String @id @default(cuid())
  name String

  incorporationType    String
  incorporationDate    DateTime
  incorporationCountry String
  incorporationState   String

  streetAddress String
  city          String
  state         String
  zipcode       String

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  users     Membership[]
}

enum MEMBERHIP_STATUS {
  PENDING
  ACCEPTED
  DECLINED
}

enum MEMBERSHIP_ACCESS {
  READ
  WRITE
  ADMIN
}

model Membership {
  id          String            @id @default(cuid())
  title       String?
  active      Boolean           @default(true)
  status      MEMBERHIP_STATUS  @default(PENDING)
  access      MEMBERSHIP_ACCESS @default(READ)
  isOnboarded Boolean           @default(false)

  lastAccessed DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  invitedEmail String?

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  @@unique([companyId, invitedEmail])
  @@unique([userId])
  @@index([companyId])
}

model Audit {
  id         String   @id @default(cuid())
  action     String
  occurredAt DateTime @default(now())
  actor      Json
  target     Json[]
  context    Json
}
