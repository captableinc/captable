generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator json {
  provider = "prisma-json-types-generator"
}

generator enums {
  provider = "node ./prisma/enum-generator.cjs"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  companies Member[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id                   String   @id @default(cuid())
  name                 String
  publicId             String
  incorporationType    String
  incorporationDate    DateTime
  incorporationCountry String
  incorporationState   String

  streetAddress String
  city          String
  state         String
  zipcode       String

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  users            Member[]
  audits           Audit[]
  shareClasses     ShareClass[]
  equityPlans      EquityPlan[]
  documents        Document[]
  templates        Template[]
  stakeholders     Stakeholder[]
  investments      Investment[]
  shares           Share[]
  options          Option[]
  safes            Safe[]
  convertibleNotes ConvertibleNote[]

  @@unique([publicId])
}

enum MemberStatusEnum {
  ACTIVE
  INACTIVE
  PENDING
}

model Member {
  id           String           @id @default(cuid())
  title        String?
  status       MemberStatusEnum @default(PENDING)
  isOnboarded  Boolean          @default(false)
  workEmail    String?
  lastAccessed DateTime         @default(now())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  documentReceived EsignRecipient[]
  documents        Document[]
  templates        Template[]

  @@unique([companyId, userId])
  @@index([companyId])
  @@index([status])
  @@index([userId])
}

enum StakeholderTypeEnum {
  INDIVIDUAL
  INSTITUTION
}

enum StakeholderRelationshipEnum {
  ADVISOR
  BOARD_MEMBER
  CONSULTANT
  EMPLOYEE
  EX_ADVISOR
  EX_CONSULTANT
  EX_EMPLOYEE
  EXECUTIVE
  FOUNDER
  INVESTOR
  NON_US_EMPLOYEE
  OFFICER
  OTHER
}

model Stakeholder {
  id                  String                      @id @default(cuid())
  name                String
  email               String                      @unique
  institutionName     String?
  stakeholderType     StakeholderTypeEnum         @default(INDIVIDUAL)
  currentRelationship StakeholderRelationshipEnum @default(EMPLOYEE)
  taxId               String?

  streetAddress String?
  city          String?
  state         String?
  zipcode       String?

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  investments      Investment[]
  shares           Share[]
  options          Option[]
  safes            Safe[]
  convertibleNotes ConvertibleNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

model Audit {
  id         String   @id @default(cuid())
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  summary    String?
  action     String // AuditAction
  occurredAt DateTime @default(now())
  actor      Json // AuditActor
  target     Json[] // AuditTarget
  context    Json // AuditContext

  @@index([companyId])
}

enum ShareTypeEnum {
  COMMON
  PREFERRED
}

enum SharePrefixEnum {
  CS // Common Shares
  PS // Preferred Shares
}

enum ConversionRightsEnum {
  CONVERTS_TO_FUTURE_ROUND
  CONVERTS_TO_SHARE_CLASS_ID
}

// Based on OCF format
// https://open-cap-table-coalition.github.io/Open-Cap-Format-OCF/schema_markdown/schema/objects/StockClass/
model ShareClass {
  id                      String          @id @default(cuid())
  idx                     Int // auto-generated, auto-incremented based on company
  name                    String
  classType               ShareTypeEnum   @default(COMMON)
  prefix                  SharePrefixEnum @default(CS)
  initialSharesAuthorized BigInt
  boardApprovalDate       DateTime
  stockholderApprovalDate DateTime
  votesPerShare           Int
  parValue                Float
  pricePerShare           Float
  seniority               Int

  // Conversion Rights
  conversionRights       ConversionRightsEnum @default(CONVERTS_TO_FUTURE_ROUND)
  convertsToShareClassId String?

  liquidationPreferenceMultiple Float
  participationCapMultiple      Float

  companyId   String
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  equityPlans EquityPlan[]
  investments Investment[]
  shares      Share[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, idx])
  @@index([companyId])
}

enum CancellationBehaviorEnum {
  RETIRE
  RETURN_TO_POOL
  HOLD_AS_CAPITAL_STOCK
  DEFINED_PER_PLAN_SECURITY
}

model EquityPlan {
  id                         String                   @id @default(cuid())
  name                       String
  boardApprovalDate          DateTime
  planEffectiveDate          DateTime?
  initialSharesReserved      BigInt
  defaultCancellatonBehavior CancellationBehaviorEnum
  comments                   String?

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  shareClassId String
  shareClass   ShareClass @relation(fields: [shareClassId], references: [id], onDelete: Cascade)

  options Option[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shareClassId])
  @@index([companyId])
}

model Bucket {
  id       String @id @default(cuid())
  name     String
  key      String
  mimeType String
  size     Int

  documents Document[]
  templates Template[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id       String @id @default(cuid())
  publicId String
  name     String

  bucketId String
  bucket   Bucket @relation(fields: [bucketId], references: [id], onDelete: Cascade)

  uploaderId String
  uploader   Member @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  shareId String?
  share   Share?  @relation(fields: [shareId], references: [id], onDelete: SetNull)

  optionId String?
  option   Option? @relation(fields: [optionId], references: [id], onDelete: SetNull)

  safeId String?
  safe   Safe?   @relation(fields: [safeId], references: [id], onDelete: SetNull)

  convertibleNoteId String?
  convertibleNote   ConvertibleNote? @relation(fields: [convertibleNoteId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([publicId])
  @@index([bucketId])
  @@index([uploaderId])
  @@index([companyId])
  @@index([shareId])
  @@index([optionId])
  @@index([safeId])
  @@index([convertibleNoteId])
}

enum FieldTypes {
  TEXT
  RADIO
  EMAIL
  DATE
  DATETIME
  TEXTAREA
  CHECKBOX
  SIGNATURE
}

model TemplateField {
  id             String     @id @default(cuid())
  name           String
  type           FieldTypes @default(TEXT)
  placeholder    String     @default("")
  required       Boolean    @default(false)
  top            Int
  left           Int
  width          Int
  height         Int
  template       Template   @relation(fields: [templateId], references: [id])
  templateId     String
  viewportHeight Int
  viewportWidth  Int
  page           Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([templateId])
}

enum TemplateStatus {
  DRAFT
  COMPLETE
}

model Template {
  id       String         @id @default(cuid())
  publicId String
  name     String
  status   TemplateStatus @default(DRAFT)

  bucketId String
  bucket   Bucket @relation(fields: [bucketId], references: [id], onDelete: Cascade)

  uploaderId String
  uploader   Member @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fields TemplateField[]

  @@index([bucketId])
  @@index([uploaderId])
  @@index([companyId])
}

enum EsignRecipientStatus {
  SENT
  SIGNED
  PENDING
}

model EsignRecipient {
  id     String               @id @default(cuid())
  email  String?
  status EsignRecipientStatus @default(PENDING)

  memberId String?
  member   Member? @relation(fields: [memberId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
}

enum SecuritiesStatusEnum {
  ACTIVE
  DRAFT
  SIGNED
  PENDING
}

enum VestingScheduleEnum {
  VESTING_0_0_0 // Immediate vesting
  VESTING_0_0_1 // 1 year cliff with no vesting
  VESTING_4_1_0 // 4 years vesting every month with no cliff
  VESTING_4_1_1 // 4 years vesting every month with 1 year cliff
  VESTING_4_3_1 // 4 years vesting every 3 months with 1 year cliff
  VESTING_4_6_1 // 4 years vesting every 6 months with 1 year cliff
  VESTING_4_12_1 // 4 years vesting every year with 1 year cliff
}

enum ShareLegendsEnum {
  US_SECURITIES_ACT // US Securities Act of 1933
  SALE_AND_ROFR // Sale and Right of first refusal
  TRANSFER_RESTRICTIONS // Bylaw transfer restrictions
}

model Share {
  id     String               @id @default(cuid())
  status SecuritiesStatusEnum @default(DRAFT)

  certificateId       String
  quantity            Int // Number of shares
  pricePerShare       Float?
  capitalContribution Float? // Total amount of money contributed/invested
  ipContribution      Float? // Value of the intellectual property contributed
  debtCancelled       Float? // Amount of debt cancelled
  otherContributions  Float? // Other contributions

  vestingSchedule VestingScheduleEnum
  companyLegends  ShareLegendsEnum[]

  issueDate         DateTime
  rule144Date       DateTime?
  vestingStartDate  DateTime?
  boardApprovalDate DateTime

  stakeholderId String
  stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  shareClassId String
  shareClass   ShareClass @relation(fields: [shareClassId], references: [id], onDelete: Cascade)

  documents Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([shareClassId])
  @@index([stakeholderId])
}

enum OptionTypeEnum {
  ISO // Incentive Stock Options
  NSO // Non-satutory Stock Options
  RSU // Restricted Stock Units
}

enum OptionStatusEnum {
  DRAFT
  ACTIVE
  EXERCISED
  EXPIRED
  CANCELLED
}

model Option {
  id            String @id @default(cuid())
  quantity      Int
  exercisePrice Float

  type            OptionTypeEnum
  status          OptionStatusEnum    @default(DRAFT)
  vestingSchedule VestingScheduleEnum

  issueDate         DateTime
  expirationDate    DateTime
  vestingStartDate  DateTime
  boardApprovalDate DateTime
  rule144Date       DateTime

  documents Document[]

  stakeholderId String
  stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  equityPlanId String
  equityPlan   EquityPlan @relation(fields: [equityPlanId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([equityPlanId])
  @@index([stakeholderId])
}

model Investment {
  id       String   @id @default(cuid())
  amount   Float // Amount of money invested
  shares   BigInt // Number of shares issued to the investor at the time of investment
  date     DateTime
  comments String?

  shareClassId String
  shareClass   ShareClass @relation(fields: [shareClassId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Investors => StakeholderRelationshipEnum["INVESTOR"]
  stakeholderId String
  stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([stakeholderId])
  @@index([shareClassId])
}

enum SafeTypeEnum {
  PRE_MONEY
  POST_MONEY
  UNCAPPED
}

enum SafeStatusEnum {
  DRAFT
  ACTIVE
  PENDING
  EXPIRED
  CANCELLED
}

model Safe {
  id       String         @id @default(cuid())
  publicId String // eg. SAFE-01
  type     SafeTypeEnum
  status   SafeStatusEnum @default(DRAFT)
  capital  Float // Amount of money invested

  valuationCap    Float?
  discountRate    Float?
  mfn             Boolean? // Most Favored Nation
  proRata         Boolean? // Pro Rata Rights
  additionalTerms String?

  documents Document[]

  stakeholderId String
  stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  issueDate         DateTime
  boardApprovalDate DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([publicId, companyId])
  @@index([companyId])
  @@index([stakeholderId])
}

enum ConvertibleStatusEnum {
  DRAFT
  ACTIVE
  PENDING
  EXPIRED
  CANCELLED
}

enum ConvertibleTypeEnum {
  CCD // Compulsory Convertible Debenture
  OCD // Optionally Convertible Debenture
  NOTE // Simple Convertible note
}

enum ConvertibleInterestMethodEnum {
  SIMPLE
  COMPOUND
}

enum ConvertibleInterestAccrualEnum {
  DAILY
  MONTHLY
  SEMI_ANNUALLY
  ANNUALLY
  YEARLY
  CONTINUOUSLY
}

enum ConvertibleInterestPaymentScheduleEnum {
  DEFERRED
  PAY_AT_MATURITY
}

model ConvertibleNote {
  id       String                @id @default(cuid())
  publicId String // eg. CN-01
  status   ConvertibleStatusEnum @default(DRAFT)
  type     ConvertibleTypeEnum   @default(NOTE)
  capital  Float // Amount of money invested

  conversionCap   Float?
  discountRate    Float?
  mfn             Boolean? // Most Favored Nation
  additionalTerms String?

  interestRate            Float?
  interestMethod          ConvertibleInterestMethodEnum?
  interestAccrual         ConvertibleInterestAccrualEnum?
  interestPaymentSchedule ConvertibleInterestPaymentScheduleEnum?

  documents Document[]

  stakeholderId String
  stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  issueDate         DateTime
  boardApprovalDate DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([publicId, companyId])
  @@index([companyId])
  @@index([stakeholderId])
}
