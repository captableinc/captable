generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator json {
  provider = "prisma-json-types-generator"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  companies     Member[]
}

model WaitlistUser {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id                   String   @id @default(cuid())
  name                 String
  publicId             String
  incorporationType    String
  incorporationDate    DateTime
  incorporationCountry String
  incorporationState   String

  streetAddress String
  city          String
  state         String
  zipcode       String

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  users        Member[]
  audits       Audit[]
  shareClasses ShareClass[]
  equityPlans  EquityPlan[]
  documents    Document[]
  templates    Template[]

  @@unique([publicId])
}

enum MemberStatusEnum {
  ACTIVE
  INACTIVE
  PENDING
}

model Member {
  id           String           @id @default(cuid())
  title        String?
  status       MemberStatusEnum @default(PENDING)
  isOnboarded  Boolean          @default(false)
  workEmail    String?
  lastAccessed DateTime         @default(now())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  documentReceived EsignRecipient[]
  documents        Document[]
  templates        Template[]

  @@unique([companyId, userId])
  @@index([companyId])
  @@index([status])
  @@index([userId])
}

enum StakeholderTypeEnum {
  INDIVIDUAL
  INSTITUTION
}

model Stakeholder {
  id    String              @id @default(cuid())
  name  String
  email String
  type  StakeholderTypeEnum @default(INSTITUTION)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Audit {
  id         String   @id @default(cuid())
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  summary    String?
  action     String // AuditAction
  occurredAt DateTime @default(now())
  actor      Json // AuditActor
  target     Json[] // AuditTarget
  context    Json // AuditContext

  @@index([companyId])
}

enum ShareTypeEnum {
  COMMON
  PREFERRED
}

enum SharePrefixEnum {
  CS // Common Shares
  PS // Preferred Shares
}

enum ConversionRightsEnum {
  CONVERTS_TO_FUTURE_ROUND
  CONVERTS_TO_SHARE_CLASS_ID
}

// Based on OCF format
// https://open-cap-table-coalition.github.io/Open-Cap-Format-OCF/schema_markdown/schema/objects/StockClass/
model ShareClass {
  id                      String          @id @default(cuid())
  idx                     Int // auto-generated, auto-incremented based on company
  name                    String
  classType               ShareTypeEnum   @default(COMMON)
  prefix                  SharePrefixEnum @default(CS)
  initialSharesAuthorized BigInt
  boardApprovalDate       DateTime
  stockholderApprovalDate DateTime
  votesPerShare           Int
  parValue                Float
  pricePerShare           Float
  seniority               Int

  // Conversion Rights
  conversionRights       ConversionRightsEnum @default(CONVERTS_TO_FUTURE_ROUND)
  convertsToShareClassId String?

  liquidationPreferenceMultiple Float
  participationCapMultiple      Float

  companyId   String
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  equityPlans EquityPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, idx])
  @@index([companyId])
}

enum CancellationBehaviorEnum {
  RETIRE
  RETURN_TO_POOL
  HOLD_AS_CAPITAL_STOCK
  DEFINED_PER_PLAN_SECURITY
}

model EquityPlan {
  id                         String                   @id @default(cuid())
  name                       String
  boardApprovalDate          DateTime
  planEffectiveDate          DateTime?
  initialSharesReserved      BigInt
  defaultCancellatonBehavior CancellationBehaviorEnum
  comments                   String?

  companyId    String
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  shareClassId String
  shareClass   ShareClass @relation(fields: [shareClassId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shareClassId])
  @@index([companyId])
}

model Bucket {
  id       String @id @default(cuid())
  name     String
  key      String
  mimeType String
  size     Int

  documents Document[]
  templates Template[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id       String @id @default(cuid())
  publicId String
  name     String

  bucketId String
  bucket   Bucket @relation(fields: [bucketId], references: [id], onDelete: Cascade)

  uploaderId String
  uploader   Member @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([publicId])
  @@index([bucketId])
  @@index([uploaderId])
  @@index([companyId])
}

enum FieldTypes {
  TEXT
  RADIO
  EMAIL
  DATE
  DATETIME
  TEXTAREA
  CHECKBOX
  SIGNATURE
}

model TemplateField {
  id          String     @id @default(cuid())
  name        String
  type        FieldTypes @default(TEXT)
  placeholder String     @default("")
  required    Boolean    @default(false)
  positionX   Decimal
  positionY   Decimal
  width       Decimal
  height      Decimal
  order       Int
  template    Template   @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([templateId])
}

enum TemplateStatus {
  DRAFT
  COMPLETE
}

model Template {
  id       String         @id @default(cuid())
  publicId String
  name     String
  status   TemplateStatus @default(DRAFT)

  bucketId String
  bucket   Bucket @relation(fields: [bucketId], references: [id], onDelete: Cascade)

  uploaderId String
  uploader   Member @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fields TemplateField[]

  @@index([bucketId])
  @@index([uploaderId])
  @@index([companyId])
}

enum EsignRecipientStatus {
  SENT
  SIGNED
  PENDING
}

model EsignRecipient {
  id     String               @id @default(cuid())
  email  String?
  status EsignRecipientStatus @default(PENDING)

  memberId String?
  member   Member? @relation(fields: [memberId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
}
